function init() {
    console.info("page loaded");
    var stage = new createjs.Stage("game"); //указываем id для canvas
    /*
    stage - это сцена, на которой расположены все объекты
    Какие объекты можно располагать на сцене:
        Text - объекты с текстом, у них можно настраивать текст, шрифт
        Shape - статичные рисунки, на которых может быть нарисовано то же, что на Canvas. Т.е. линии, круги и т.д.
        Sprite - это анимированное изображение, анимация настраивается через SpriteSheets
        Bitmap - это картинки <img> или другие canvas или даже <video>
        Container - контейнер для элементов, на нем тоже могут быть Shape, Sprite, Bitmap, Text и другие контейнеры.

    Всё это - DisplayObject, объекты, которые можно располагать на сцене. У них у всех есть размеры (высота, ширина),
    координаты (где они находятся) и трансформации (сжатия, растяжения, повороты)
    */

    //Начнем с создания Shape:
    var circle = new createjs.Shape();
    //после создания Shape пустой, на нем ничего не нарисовано. А мы хотим нарисовать кружок
    var g = circle.graphics; //graphics - это холст, то на чем можно  рисовать, похожая по смыслу на ctx
    g
        .beginFill("red")
        .drawCircle(0, 0, 40); //рисуем закрашенный круг в (0, 0) радиус 40

    // этот код анаоргичен
    // g.beginFill("red");
    // g.drawCircle(0, 0, 40);
    // но короче, потому что не надо повторять g
    //Это называется flow-стиль, метод вызывается от прошлого метода, см. JQuery

    circle.x = 100; //это координаты круга в его контейнере (на сцене)
    circle.y = 100; //т.е. мы говорим, где в контейнере начала координат у shape

    //надо обязательно добавить объект на сцену, иначе он не будет виден
    stage.addChild(circle);

    //давайте добавим на сцену ещё один Shape. Пусть это будет треугоольник.
    var triangle = new createjs.Shape();
    triangle.graphics
        .beginFill("green") //команды очень похожи на команды из canvas
        .moveTo(-20, 0) //нарисовали "путь", и этот путь заполнился
        .lineTo(20, 0)
        .lineTo(0, -20);
    //мы нарисовали равнобедренный треугольник. Точка (0, 0) у него в середине основания.

    //вот здесь все возможные методы для рисования на graphics
    //https://www.createjs.com/docs/easeljs/classes/Graphics.html

    stage.addChild(triangle);
    triangle.x = 100;
    triangle.y = 100;
    //когда мы указали x и y для треугольника, мы указали x, y для середины его основания

    var triangle2 = new createjs.Shape();
    triangle2.graphics
        .beginFill("blue") //команды очень похожи на команды из canvas
        .moveTo(-20, 0) //нарисовали "путь", и этот путь заполнился
        .lineTo(20, 0)
        .lineTo(0, -20);
    stage.addChild(triangle2);
    triangle2.x = 100;
    triangle2.y = 100;
    triangle2.regX = 0; //(0, -20) это точка в треугольнике - верхняя вершина
    triangle2.regY = -20; //значит в контейнере мы будем указывать координаты верхней вершины

    //regX, regY в системе координат Shape задают опорную точку (pivot point)

    //теперь добавим Bitmap для примера
    var img = new createjs.Bitmap("dursley.jpg");
    stage.addChild(img);

    //и надо делать команду на перерисовку сцены
    stage.update();

    setTimeout(function () {
        //узнаем размер картинки, когда она загрузится
        //это универсальный метод для любого объекта на сцене
        var rect = img.getBounds();
        // rect.width - ширина
        // rect.height - высота
        img.scaleX = 400 / rect.width;
        img.scaleY = 400 / rect.height;
        img.x = 100;
        img.y = 100;
        stage.update()
    }, 2000);
    //дальше это не понадобится, потому что у нас будет анимация с постоянной перерисовкой сцены.

    //Теперь добавим анимацию. Будем двигать Дурслей, постепенно увеличивая их x и y

    //это таймер, один класс на всю программу,
    //его не надо создавать, он уже есть

    createjs.Ticker.addEventListener("tick", stage);
    //мы добавили сцену как слушателя "tick", это событие срабатывает 60 раз в секунду (это можно настроить)
    //Теперь, все объекты на сцене тоже получают событие tick. По этому событию объекты можно анимироватью
    img.addEventListener("tick", function () {
        img.x += 1; //сдвигаем на 1 пиксель
        img.y += 1;
    });
    //нет большой разницы, на какой объект повесить событие tick, мы могли повесить такое событие хоть на треугольник.
    //Но логично действия про картинку повесить на картинку.

    //скорость анимации
    createjs.Ticker.framerate = 60;
    createjs.Ticker.interval = 20;  //20 мс между срабатываниями (50 раз/сек)
    //режим
    createjs.Ticker.timerMode = createjs.Ticker.RAF_SYNCHED;
    //RAF - requestAnimationFrame, это как мы делали. Но в этом режиме нельзя настраивать скорость.
    //RAF_SYNCHED - это тоже requestAnimationFrame, но с попыткой синхронизировать скорость срабатывания с указанной
    //TIMEOUT - через функцию setTimeout
}